// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_message.proto

#include "client_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sockets {
constexpr client_msg_OperationData::client_msg_OperationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : random_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , argument_(0){}
struct client_msg_OperationDataDefaultTypeInternal {
  constexpr client_msg_OperationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_msg_OperationDataDefaultTypeInternal() {}
  union {
    client_msg_OperationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_msg_OperationDataDefaultTypeInternal _client_msg_OperationData_default_instance_;
constexpr client_msg::client_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ops_(){}
struct client_msgDefaultTypeInternal {
  constexpr client_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_msgDefaultTypeInternal() {}
  union {
    client_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_msgDefaultTypeInternal _client_msg_default_instance_;
}  // namespace sockets
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fmessage_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_client_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg_OperationData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg_OperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg_OperationData, type_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg_OperationData, argument_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg_OperationData, random_data_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, ops_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::sockets::client_msg_OperationData)},
  { 12, -1, -1, sizeof(::sockets::client_msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sockets::_client_msg_OperationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sockets::_client_msg_default_instance_),
};

const char descriptor_table_protodef_client_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024client_message.proto\022\007sockets\"\352\001\n\nclie"
  "nt_msg\022.\n\003ops\030\003 \003(\0132!.sockets.client_msg"
  ".OperationData\032g\n\rOperationData\022/\n\004type\030"
  "\001 \002(\0162!.sockets.client_msg.OperationType"
  "\022\020\n\010argument\030\002 \001(\005\022\023\n\013random_data\030\003 \001(\t\""
  "C\n\rOperationType\022\007\n\003ADD\020\000\022\007\n\003SUB\020\001\022\017\n\013TE"
  "RMINATION\020\002\022\017\n\013RANDOM_DATA\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fmessage_2eproto = {
  false, false, 268, descriptor_table_protodef_client_5fmessage_2eproto, "client_message.proto", 
  &descriptor_table_client_5fmessage_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_client_5fmessage_2eproto::offsets,
  file_level_metadata_client_5fmessage_2eproto, file_level_enum_descriptors_client_5fmessage_2eproto, file_level_service_descriptors_client_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_client_5fmessage_2eproto_getter() {
  return &descriptor_table_client_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_client_5fmessage_2eproto(&descriptor_table_client_5fmessage_2eproto);
namespace sockets {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* client_msg_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fmessage_2eproto);
  return file_level_enum_descriptors_client_5fmessage_2eproto[0];
}
bool client_msg_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr client_msg_OperationType client_msg::ADD;
constexpr client_msg_OperationType client_msg::SUB;
constexpr client_msg_OperationType client_msg::TERMINATION;
constexpr client_msg_OperationType client_msg::RANDOM_DATA;
constexpr client_msg_OperationType client_msg::OperationType_MIN;
constexpr client_msg_OperationType client_msg::OperationType_MAX;
constexpr int client_msg::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class client_msg_OperationData::_Internal {
 public:
  using HasBits = decltype(std::declval<client_msg_OperationData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_random_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

client_msg_OperationData::client_msg_OperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sockets.client_msg.OperationData)
}
client_msg_OperationData::client_msg_OperationData(const client_msg_OperationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  random_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    random_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_random_data()) {
    random_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_random_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&argument_) -
    reinterpret_cast<char*>(&type_)) + sizeof(argument_));
  // @@protoc_insertion_point(copy_constructor:sockets.client_msg.OperationData)
}

inline void client_msg_OperationData::SharedCtor() {
random_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  random_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&argument_) -
    reinterpret_cast<char*>(&type_)) + sizeof(argument_));
}

client_msg_OperationData::~client_msg_OperationData() {
  // @@protoc_insertion_point(destructor:sockets.client_msg.OperationData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_msg_OperationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  random_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_msg_OperationData::ArenaDtor(void* object) {
  client_msg_OperationData* _this = reinterpret_cast< client_msg_OperationData* >(object);
  (void)_this;
}
void client_msg_OperationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_msg_OperationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_msg_OperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:sockets.client_msg.OperationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    random_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&argument_) -
        reinterpret_cast<char*>(&type_)) + sizeof(argument_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_msg_OperationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .sockets.client_msg.OperationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sockets::client_msg_OperationType_IsValid(val))) {
            _internal_set_type(static_cast<::sockets::client_msg_OperationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 argument = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_argument(&has_bits);
          argument_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string random_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_random_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sockets.client_msg.OperationData.random_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_msg_OperationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sockets.client_msg.OperationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sockets.client_msg.OperationType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int32 argument = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_argument(), target);
  }

  // optional string random_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_random_data().data(), static_cast<int>(this->_internal_random_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sockets.client_msg.OperationData.random_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_random_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sockets.client_msg.OperationData)
  return target;
}

size_t client_msg_OperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sockets.client_msg.OperationData)
  size_t total_size = 0;

  // required .sockets.client_msg.OperationType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string random_data = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_random_data());
  }

  // optional int32 argument = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_argument());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_msg_OperationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_msg_OperationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_msg_OperationData::GetClassData() const { return &_class_data_; }

void client_msg_OperationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_msg_OperationData *>(to)->MergeFrom(
      static_cast<const client_msg_OperationData &>(from));
}


void client_msg_OperationData::MergeFrom(const client_msg_OperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sockets.client_msg.OperationData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_random_data(from._internal_random_data());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      argument_ = from.argument_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_msg_OperationData::CopyFrom(const client_msg_OperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sockets.client_msg.OperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_msg_OperationData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void client_msg_OperationData::InternalSwap(client_msg_OperationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &random_data_, lhs_arena,
      &other->random_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(client_msg_OperationData, argument_)
      + sizeof(client_msg_OperationData::argument_)
      - PROTOBUF_FIELD_OFFSET(client_msg_OperationData, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata client_msg_OperationData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[0]);
}

// ===================================================================

class client_msg::_Internal {
 public:
};

client_msg::client_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sockets.client_msg)
}
client_msg::client_msg(const client_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sockets.client_msg)
}

inline void client_msg::SharedCtor() {
}

client_msg::~client_msg() {
  // @@protoc_insertion_point(destructor:sockets.client_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void client_msg::ArenaDtor(void* object) {
  client_msg* _this = reinterpret_cast< client_msg* >(object);
  (void)_this;
}
void client_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:sockets.client_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sockets.client_msg.OperationData ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sockets.client_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sockets.client_msg.OperationData ops = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sockets.client_msg)
  return target;
}

size_t client_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sockets.client_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sockets.client_msg.OperationData ops = 3;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_msg::GetClassData() const { return &_class_data_; }

void client_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_msg *>(to)->MergeFrom(
      static_cast<const client_msg &>(from));
}


void client_msg::MergeFrom(const client_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sockets.client_msg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_msg::CopyFrom(const client_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sockets.client_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_msg::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ops_))
    return false;
  return true;
}

void client_msg::InternalSwap(client_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata client_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sockets
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sockets::client_msg_OperationData* Arena::CreateMaybeMessage< ::sockets::client_msg_OperationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sockets::client_msg_OperationData >(arena);
}
template<> PROTOBUF_NOINLINE ::sockets::client_msg* Arena::CreateMaybeMessage< ::sockets::client_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sockets::client_msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
