// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fmessage_2eproto;
namespace sockets {
class client_msg;
struct client_msgDefaultTypeInternal;
extern client_msgDefaultTypeInternal _client_msg_default_instance_;
class client_msg_OperationData;
struct client_msg_OperationDataDefaultTypeInternal;
extern client_msg_OperationDataDefaultTypeInternal _client_msg_OperationData_default_instance_;
}  // namespace sockets
PROTOBUF_NAMESPACE_OPEN
template<> ::sockets::client_msg* Arena::CreateMaybeMessage<::sockets::client_msg>(Arena*);
template<> ::sockets::client_msg_OperationData* Arena::CreateMaybeMessage<::sockets::client_msg_OperationData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sockets {

enum client_msg_OperationType : int {
  client_msg_OperationType_ADD = 0,
  client_msg_OperationType_SUB = 1,
  client_msg_OperationType_TERMINATION = 2,
  client_msg_OperationType_RANDOM_DATA = 3
};
bool client_msg_OperationType_IsValid(int value);
constexpr client_msg_OperationType client_msg_OperationType_OperationType_MIN = client_msg_OperationType_ADD;
constexpr client_msg_OperationType client_msg_OperationType_OperationType_MAX = client_msg_OperationType_RANDOM_DATA;
constexpr int client_msg_OperationType_OperationType_ARRAYSIZE = client_msg_OperationType_OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* client_msg_OperationType_descriptor();
template<typename T>
inline const std::string& client_msg_OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, client_msg_OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function client_msg_OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    client_msg_OperationType_descriptor(), enum_t_value);
}
inline bool client_msg_OperationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, client_msg_OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<client_msg_OperationType>(
    client_msg_OperationType_descriptor(), name, value);
}
// ===================================================================

class client_msg_OperationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sockets.client_msg.OperationData) */ {
 public:
  inline client_msg_OperationData() : client_msg_OperationData(nullptr) {}
  ~client_msg_OperationData() override;
  explicit constexpr client_msg_OperationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_msg_OperationData(const client_msg_OperationData& from);
  client_msg_OperationData(client_msg_OperationData&& from) noexcept
    : client_msg_OperationData() {
    *this = ::std::move(from);
  }

  inline client_msg_OperationData& operator=(const client_msg_OperationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_msg_OperationData& operator=(client_msg_OperationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_msg_OperationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_msg_OperationData* internal_default_instance() {
    return reinterpret_cast<const client_msg_OperationData*>(
               &_client_msg_OperationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(client_msg_OperationData& a, client_msg_OperationData& b) {
    a.Swap(&b);
  }
  inline void Swap(client_msg_OperationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_msg_OperationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_msg_OperationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_msg_OperationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_msg_OperationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const client_msg_OperationData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_msg_OperationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sockets.client_msg.OperationData";
  }
  protected:
  explicit client_msg_OperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandomDataFieldNumber = 3,
    kTypeFieldNumber = 1,
    kArgumentFieldNumber = 2,
  };
  // optional string random_data = 3;
  bool has_random_data() const;
  private:
  bool _internal_has_random_data() const;
  public:
  void clear_random_data();
  const std::string& random_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_random_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_random_data();
  PROTOBUF_NODISCARD std::string* release_random_data();
  void set_allocated_random_data(std::string* random_data);
  private:
  const std::string& _internal_random_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_random_data(const std::string& value);
  std::string* _internal_mutable_random_data();
  public:

  // required .sockets.client_msg.OperationType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sockets::client_msg_OperationType type() const;
  void set_type(::sockets::client_msg_OperationType value);
  private:
  ::sockets::client_msg_OperationType _internal_type() const;
  void _internal_set_type(::sockets::client_msg_OperationType value);
  public:

  // optional int32 argument = 2;
  bool has_argument() const;
  private:
  bool _internal_has_argument() const;
  public:
  void clear_argument();
  int32_t argument() const;
  void set_argument(int32_t value);
  private:
  int32_t _internal_argument() const;
  void _internal_set_argument(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sockets.client_msg.OperationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr random_data_;
  int type_;
  int32_t argument_;
  friend struct ::TableStruct_client_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class client_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sockets.client_msg) */ {
 public:
  inline client_msg() : client_msg(nullptr) {}
  ~client_msg() override;
  explicit constexpr client_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_msg(const client_msg& from);
  client_msg(client_msg&& from) noexcept
    : client_msg() {
    *this = ::std::move(from);
  }

  inline client_msg& operator=(const client_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_msg& operator=(client_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_msg* internal_default_instance() {
    return reinterpret_cast<const client_msg*>(
               &_client_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(client_msg& a, client_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(client_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const client_msg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sockets.client_msg";
  }
  protected:
  explicit client_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef client_msg_OperationData OperationData;

  typedef client_msg_OperationType OperationType;
  static constexpr OperationType ADD =
    client_msg_OperationType_ADD;
  static constexpr OperationType SUB =
    client_msg_OperationType_SUB;
  static constexpr OperationType TERMINATION =
    client_msg_OperationType_TERMINATION;
  static constexpr OperationType RANDOM_DATA =
    client_msg_OperationType_RANDOM_DATA;
  static inline bool OperationType_IsValid(int value) {
    return client_msg_OperationType_IsValid(value);
  }
  static constexpr OperationType OperationType_MIN =
    client_msg_OperationType_OperationType_MIN;
  static constexpr OperationType OperationType_MAX =
    client_msg_OperationType_OperationType_MAX;
  static constexpr int OperationType_ARRAYSIZE =
    client_msg_OperationType_OperationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationType_descriptor() {
    return client_msg_OperationType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationType_Name.");
    return client_msg_OperationType_Name(enum_t_value);
  }
  static inline bool OperationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperationType* value) {
    return client_msg_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 3,
  };
  // repeated .sockets.client_msg.OperationData ops = 3;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::sockets::client_msg_OperationData* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sockets::client_msg_OperationData >*
      mutable_ops();
  private:
  const ::sockets::client_msg_OperationData& _internal_ops(int index) const;
  ::sockets::client_msg_OperationData* _internal_add_ops();
  public:
  const ::sockets::client_msg_OperationData& ops(int index) const;
  ::sockets::client_msg_OperationData* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sockets::client_msg_OperationData >&
      ops() const;

  // @@protoc_insertion_point(class_scope:sockets.client_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sockets::client_msg_OperationData > ops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// client_msg_OperationData

// required .sockets.client_msg.OperationType type = 1;
inline bool client_msg_OperationData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool client_msg_OperationData::has_type() const {
  return _internal_has_type();
}
inline void client_msg_OperationData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sockets::client_msg_OperationType client_msg_OperationData::_internal_type() const {
  return static_cast< ::sockets::client_msg_OperationType >(type_);
}
inline ::sockets::client_msg_OperationType client_msg_OperationData::type() const {
  // @@protoc_insertion_point(field_get:sockets.client_msg.OperationData.type)
  return _internal_type();
}
inline void client_msg_OperationData::_internal_set_type(::sockets::client_msg_OperationType value) {
  assert(::sockets::client_msg_OperationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void client_msg_OperationData::set_type(::sockets::client_msg_OperationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sockets.client_msg.OperationData.type)
}

// optional int32 argument = 2;
inline bool client_msg_OperationData::_internal_has_argument() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool client_msg_OperationData::has_argument() const {
  return _internal_has_argument();
}
inline void client_msg_OperationData::clear_argument() {
  argument_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t client_msg_OperationData::_internal_argument() const {
  return argument_;
}
inline int32_t client_msg_OperationData::argument() const {
  // @@protoc_insertion_point(field_get:sockets.client_msg.OperationData.argument)
  return _internal_argument();
}
inline void client_msg_OperationData::_internal_set_argument(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  argument_ = value;
}
inline void client_msg_OperationData::set_argument(int32_t value) {
  _internal_set_argument(value);
  // @@protoc_insertion_point(field_set:sockets.client_msg.OperationData.argument)
}

// optional string random_data = 3;
inline bool client_msg_OperationData::_internal_has_random_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool client_msg_OperationData::has_random_data() const {
  return _internal_has_random_data();
}
inline void client_msg_OperationData::clear_random_data() {
  random_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& client_msg_OperationData::random_data() const {
  // @@protoc_insertion_point(field_get:sockets.client_msg.OperationData.random_data)
  return _internal_random_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void client_msg_OperationData::set_random_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 random_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sockets.client_msg.OperationData.random_data)
}
inline std::string* client_msg_OperationData::mutable_random_data() {
  std::string* _s = _internal_mutable_random_data();
  // @@protoc_insertion_point(field_mutable:sockets.client_msg.OperationData.random_data)
  return _s;
}
inline const std::string& client_msg_OperationData::_internal_random_data() const {
  return random_data_.Get();
}
inline void client_msg_OperationData::_internal_set_random_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  random_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* client_msg_OperationData::_internal_mutable_random_data() {
  _has_bits_[0] |= 0x00000001u;
  return random_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* client_msg_OperationData::release_random_data() {
  // @@protoc_insertion_point(field_release:sockets.client_msg.OperationData.random_data)
  if (!_internal_has_random_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = random_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (random_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    random_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void client_msg_OperationData::set_allocated_random_data(std::string* random_data) {
  if (random_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  random_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), random_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (random_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    random_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sockets.client_msg.OperationData.random_data)
}

// -------------------------------------------------------------------

// client_msg

// repeated .sockets.client_msg.OperationData ops = 3;
inline int client_msg::_internal_ops_size() const {
  return ops_.size();
}
inline int client_msg::ops_size() const {
  return _internal_ops_size();
}
inline void client_msg::clear_ops() {
  ops_.Clear();
}
inline ::sockets::client_msg_OperationData* client_msg::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:sockets.client_msg.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sockets::client_msg_OperationData >*
client_msg::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:sockets.client_msg.ops)
  return &ops_;
}
inline const ::sockets::client_msg_OperationData& client_msg::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::sockets::client_msg_OperationData& client_msg::ops(int index) const {
  // @@protoc_insertion_point(field_get:sockets.client_msg.ops)
  return _internal_ops(index);
}
inline ::sockets::client_msg_OperationData* client_msg::_internal_add_ops() {
  return ops_.Add();
}
inline ::sockets::client_msg_OperationData* client_msg::add_ops() {
  ::sockets::client_msg_OperationData* _add = _internal_add_ops();
  // @@protoc_insertion_point(field_add:sockets.client_msg.ops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sockets::client_msg_OperationData >&
client_msg::ops() const {
  // @@protoc_insertion_point(field_list:sockets.client_msg.ops)
  return ops_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sockets

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sockets::client_msg_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sockets::client_msg_OperationType>() {
  return ::sockets::client_msg_OperationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fmessage_2eproto
